struct Item {id, weight, value}

Item discrete[] = {{0, 0, 0}, {1,3, 50}, {2, 2, 25}, {3, 4, 60}, {4,1, 15}, {5, 3, 40}, {6, 2, 30}}
Item fractionables[] = {{7, 3, 50}, {8, 2, 30}, {9, 4, 50}, {10, 1, 10}}

Sort-Descending(fractionables)

Fractional-Knabsack (Items[], weight):
    optimal-value = 0.0
    weight-accounted = 0
    
    for i in items:
        if weight-accounted + Items[i].weight <= weight:
        
            weight-accounted += Items[i].weight
            optimal-value += Items[i].value
        else:
        
            remaining-weight = weight - w
            optimal-value += Items[i].value * (remaining-weight / Items[i].weight)
            break
    
    return optimal-value

Knabsack-Combined(S[], F[]):
    optimal-value = 0.0;
    K[N][W]
    V[N][W]
    
    for w in first row:
        V[0][W-w] = FractionalKnabsack(F[], w)
        
    for each row i in table V:
        for each weight w in row:
            if S[i].weight < w:
                K[i][w] = max(K[i-1][w], K[i-1][w - (int)(S[i].weight)] + S[i].value);
            else:
                K[i][w] = K[i-1][w]
                
            V[i][w] = K[i][w] + V[0][w]
            
            if V[i][w] > optimal-value:
                optimal-value = V[i][w]
                
    display(V)
    
    return optimal-value


print('KnabSack table of Values: ')
optimal-value = KnabsackCombined(discrete, fractionables)
print(optimal-value)
display(Set-of-Items-Included)


